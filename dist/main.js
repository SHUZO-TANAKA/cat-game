/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./typescript/script.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./typescript/loader.js":
/*!******************************!*\
  !*** ./typescript/loader.js ***!
  \******************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n/// <reference path=\"./enchantjs.d.ts\" />\r\nclass Loader {\r\n    constructor() {\r\n        this.ImageNum = 2;\r\n        this.SoundNum = 1;\r\n    }\r\n    ImageLoader(game) {\r\n        let B_Imgs = [];\r\n        B_Imgs[0] = 0;\r\n        for (let i = 1; i <= this.ImageNum; i++) {\r\n            let B_Img = \"./image/Img\" + i + \".png\";\r\n            game.preload([B_Img]);\r\n            B_Imgs[i] = B_Img;\r\n        }\r\n        return B_Imgs;\r\n    }\r\n    SoundLoader(game) {\r\n        var M_Musics = [];\r\n        M_Musics[0] = 0;\r\n        for (let i = 1; i <= this.SoundNum; i++) {\r\n            var M_Music = \"./sound/Music\" + i + \".mp3\";\r\n            game.preload([M_Music]);\r\n            M_Musics[i] = M_Music;\r\n        }\r\n        return M_Musics;\r\n    }\r\n}\r\nconst loader = new Loader();\r\nexports.default = loader;\r\n//# sourceMappingURL=loader.js.map\n\n//# sourceURL=webpack:///./typescript/loader.js?");

/***/ }),

/***/ "./typescript/parts.js":
/*!*****************************!*\
  !*** ./typescript/parts.js ***!
  \*****************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\n/// <reference path=\"./enchantjs.d.ts\" />\r\n/// <reference path=\"./parts.d.ts\" />\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nclass Parts {\r\n    setGame(game) {\r\n        this.game = game;\r\n    }\r\n    //ボタンクラス作成\r\n    Button(text, color = \"#191970\") {\r\n        const C_Btn = Class.create(Group, {\r\n            Btn: 0,\r\n            Text: 0,\r\n            initialize: function initialize(text, color) {\r\n                Group.call(this);\r\n                var wi = text.toString(10).length * 20 + 20;\r\n                this.Btn = new Sprite(wi, 50);\r\n                this.Btn.backgroundColor = color;\r\n                this.Btn.opacity = 0.8;\r\n                this.addChild(this.Btn);\r\n                this.Text = new Label(text);\r\n                this.addChild(this.Text);\r\n                this.Text.y = 12;\r\n                this.Text.x = 10;\r\n                this.Text.font = \"20px Meiryo\";\r\n                this.Text.color = 'rgba(255,255,255, 1)';\r\n            },\r\n            setText: function SetText(_Text) {\r\n                this.childNodes[1].text = _Text;\r\n            },\r\n            setOpacity: function SetOpacity(_Opa) {\r\n                this.Btn.opacity = _Opa;\r\n                this.Text.opacity = _Opa;\r\n            },\r\n            getOpacity: function GetOpacity() {\r\n                return this.Btn.opacity;\r\n            },\r\n            changeColor: function changeColor(color) {\r\n                this.Btn.backgroundColor = color;\r\n            }\r\n        });\r\n        return new C_Btn(text, color);\r\n    }\r\n    Label(text, color = \"#fff\", fontSize = 20) {\r\n        let S_text = new Label(text);\r\n        S_text.font = fontSize + \"px 'Meiryo'\";\r\n        S_text.width = 380;\r\n        S_text.color = color;\r\n        return S_text;\r\n    }\r\n    LoopSound() {\r\n        //サウンドクラス\r\n        const LoopSound = Class.create(Sprite, {\r\n            Sound: \"\",\r\n            SFlg: 0,\r\n            game: \"\",\r\n            initialize: function initialize(_game) {\r\n                var self = this;\r\n                //クラスの初期化(コンストラクタ)\r\n                this.game = _game;\r\n                Sprite.call(this, 0, 0); //スプライトの初期化\r\n                this.SFlg = 0;\r\n                this.game.onenterframe = function () {\r\n                    //enterframeイベントのイベントリスナー\r\n                    if (self.SFlg == 1) {\r\n                        try {\r\n                            if (!self.Sound.src) {\r\n                                self.Sound.play();\r\n                            }\r\n                        }\r\n                        catch (e) { }\r\n                    }\r\n                };\r\n            },\r\n            set: function set(_Sound) {\r\n                try {\r\n                    this.Sound.stop();\r\n                }\r\n                catch (e) { }\r\n                this.Sound = _Sound;\r\n                this.SFlg = 0;\r\n                this.Sound = this.game.assets[this.Sound];\r\n                try {\r\n                    // サウンドを読み込み\r\n                    if (this.Sound.src) {\r\n                        this.Sound.play();\r\n                        this.Sound.src.loop = true;\r\n                    }\r\n                }\r\n                catch (e) { }\r\n                this.SFlg = 1;\r\n            },\r\n            stop: function stop() {\r\n                try {\r\n                    this.Sound.stop();\r\n                    this.SFlg = 0;\r\n                }\r\n                catch (e) { }\r\n            },\r\n            changeVolume: function changeVolume(num) {\r\n                this.Sound.volume = num;\r\n            }\r\n        });\r\n        return new LoopSound(this.game);\r\n    }\r\n    TextBound(str, x, y, size, color, maxTime = 40) {\r\n        //テキストバウンドクラス\r\n        var C_BoundText = Class.create(Group, {\r\n            gy: 0,\r\n            ay: 0,\r\n            ax: 0,\r\n            maxTime: 60,\r\n            WhiteLabel: \"\",\r\n            Label: \"\",\r\n            initialize: function initialize(str, x, y, size, color, maxTime) {\r\n                Group.call(this);\r\n                this.maxTime = maxTime;\r\n                this.Label = new Label(str); //enchant.jsでは文字表示はLabelオブジェクトを使う。\r\n                this.Label.font = size + \"px Meiryo\"; //メイリオで表示\r\n                this.Label.color = color; //赤で表示\r\n                this.x = x; //引数に現在座標をとる（指定位置に表示させたいので）\r\n                this.y = y; //同上\r\n                this.ax = Math.random() * 10 - 5;\r\n                this.gy = y + 100 + Math.random() * 50; //バウンド位置は自分の座標+100+0~200分下にする\r\n                this.ay = -20; //Y軸加速度を0~30で設定する\r\n                this.WhiteLabel = new Label(str);\r\n                this.WhiteLabel.x = -2;\r\n                this.WhiteLabel.y = -1;\r\n                this.WhiteLabel.font = (size + 2) + \"px Meiryo\"; //メイリオで表示\r\n                this.WhiteLabel.color = \"white\"; //白で表示\r\n                this.addChild(this.WhiteLabel);\r\n                this.addChild(this.Label);\r\n            },\r\n            onenterframe: function onenterframe() {\r\n                this.y += this.ay; //ax,ayが加速度なので、現在座標にこの値を毎回足していく\r\n                this.x += this.ax; //同上\t\t\t\r\n                this.ay += 2; //Y軸は重力があるので、↓方向に毎フレーム２を足す\r\n                if (this.gy < this.y) { //バウンド地面をY座標が越えたら\r\n                    this.ay = -this.ay * 0.8; //反発係数0.8でバウンド\r\n                    this.y = this.gy; //Y座標をバウンド地面より上移動\r\n                }\r\n                this.maxTime--; //消滅用カウント\r\n                if (this.maxTime <= 0) { //消滅用カウントが０になったら\r\n                    this.parentNode.removeChild(this); //自分をけす。そして私も消えよう。永遠に・・・！\r\n                    this.clearEventListener(\"enterframe\");\r\n                }\r\n            }\r\n        });\r\n        return new C_BoundText(str, x, y, size, color, maxTime);\r\n    }\r\n    SpriteBound(image, frame, x, y, vx) {\r\n        //テキストバウンドクラス\r\n        var C_SpriteBound = Class.create(Sprite, {\r\n            gy: 0,\r\n            ay: 0,\r\n            ax: 0,\r\n            maxTime: 40,\r\n            initialize: function initialize(image, frame, x, y, vx) {\r\n                Sprite.call(this, 40, 40);\r\n                this.image = image;\r\n                this.frame = frame;\r\n                this.x = x;\r\n                this.y = y;\r\n                this.ax = vx / 2;\r\n                this.gy = y + 100 + Math.random() * 50; //バウンド位置は自分の座標+100+0~200分下にする\r\n                this.ay = -20; //Y軸加速度を0~30で設定する\r\n            },\r\n            onenterframe: function onenterframe() {\r\n                this.y += this.ay; //ax,ayが加速度なので、現在座標にこの値を毎回足していく\r\n                this.x += this.ax; //同上\t\t\t\r\n                this.ay += 2; //Y軸は重力があるので、↓方向に毎フレーム２を足す\r\n                if (this.gy < this.y) { //バウンド地面をY座標が越えたら\r\n                    this.ay = -this.ay * 0.8; //反発係数0.8でバウンド\r\n                    this.y = this.gy; //Y座標をバウンド地面より上移動\r\n                }\r\n                this.maxTime--; //消滅用カウント\r\n                if (this.maxTime <= 0) { //消滅用カウントが０になったら\r\n                    this.parentNode.removeChild(this); //自分をけす。そして私も消えよう。永遠に・・・！\r\n                }\r\n            }\r\n        });\r\n        return new C_SpriteBound(image, frame, x, y, vx);\r\n    }\r\n    upText(str, x, y, size, color) {\r\n        //テキストバウンドクラス\r\n        var C_upText = Class.create(Group, {\r\n            WhiteLabel: \"\",\r\n            Label: \"\",\r\n            initialize: function initialize(str, x, y, size, color) {\r\n                Group.call(this);\r\n                this.Label = new Label(str); //enchant.jsでは文字表示はLabelオブジェクトを使う。\r\n                this.Label.font = size + \"px Meiryo\"; //メイリオで表示\r\n                this.Label.color = color; //赤で表示\r\n                this.x = x; //引数に現在座標をとる（指定位置に表示させたいので）\r\n                this.y = y; //同上\r\n                this.WhiteLabel = new Label(str);\r\n                this.WhiteLabel.x = -2;\r\n                this.WhiteLabel.y = -1;\r\n                this.WhiteLabel.font = (size + 2) + \"px Meiryo\"; //メイリオで表示\r\n                this.WhiteLabel.color = \"white\"; //白で表示\r\n                this.addChild(this.WhiteLabel);\r\n                this.addChild(this.Label);\r\n            },\r\n            onenterframe: function onenterframe() {\r\n                this.y -= 1;\r\n                this.Label.opacity -= 0.02;\r\n                this.WhiteLabel.opacity -= 0.02;\r\n                if (this.Label.opacity <= 0.1) { //消滅用カウントが０になったら\r\n                    this.parentNode.removeChild(this); //自分をけす。そして私も消えよう。永遠に・・・！\r\n                }\r\n            }\r\n        });\r\n        return new C_upText(str, x, y, size, color);\r\n    }\r\n}\r\nconst parts = new Parts();\r\nexports.default = parts;\r\n//# sourceMappingURL=parts.js.map\n\n//# sourceURL=webpack:///./typescript/parts.js?");

/***/ }),

/***/ "./typescript/script.js":
/*!******************************!*\
  !*** ./typescript/script.js ***!
  \******************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n/// <reference path=\"./enchantjs.d.ts\" />\r\nconst loader_1 = __webpack_require__(/*! ./loader */ \"./typescript/loader.js\");\r\nconst parts_1 = __webpack_require__(/*! ./parts */ \"./typescript/parts.js\");\r\nenchant();\r\nwindow.onload = function () {\r\n    const game = new Game(400, 600);\r\n    game.fps = 30;\r\n    const pImgs = loader_1.default.ImageLoader(game);\r\n    const pMscs = loader_1.default.SoundLoader(game);\r\n    // let score = 0; \r\n    // score >=0;\r\n    // score >= 0;\r\n    game.onload = function () {\r\n        const setScene = function (sceneNum) {\r\n            const scene = new Scene();\r\n            scene.backgroundColor = \"black\";\r\n            try {\r\n                game.popScene();\r\n            }\r\n            catch (e) {\r\n                console.log(\"it is initial Scene\");\r\n            }\r\n            game.pushScene(scene);\r\n            switch (sceneNum) {\r\n                case 0: {\r\n                    {\r\n                        let score = 0; // 一つ目のスコア\r\n                        const label = parts_1.default.Label(\"\");\r\n                        scene.addChild(label);\r\n                        const showLabel = function () {\r\n                            label.text = \"”しーちゃん”HungerPoint:\" + score;\r\n                            if (score >= 60) {\r\n                                label.text = \"HungerPoint:\" + score + \"※ハラヘリ！※\";\r\n                            }\r\n                            if (score >= 100) {\r\n                                label.text = \"HungerPoint:\" + score + \"※※暴走中！※※\";\r\n                            }\r\n                        };\r\n                        showLabel();\r\n                        const back = new Sprite(200, 120);\r\n                        back.image = game.assets[pImgs[1]];\r\n                        back.moveTo(10, 40);\r\n                        back.time = 0;\r\n                        scene.addChild(back);\r\n                        // ボタン作成１\r\n                        const btn = parts_1.default.Button(\"おやつをあげる\");\r\n                        btn.moveTo(10, 180);\r\n                        scene.addChild(btn);\r\n                        btn.ontouchend = function () {\r\n                            if (score > 0 && score < 100) {\r\n                                game.assets[pMscs[1]].clone().play(); //音を鳴らす\r\n                                score -= 40; // グローバル変数のスコアを40減らす\r\n                                this.tl.moveBy(0, -100, 40, enchant.Easing.BOUNCE_EASEOUT)\r\n                                    .moveBy(0, 100, 40);\r\n                                //   showLabel(); // スコアを反映\r\n                                // MEMO: テキストバウンドモジュールを使用する例\r\n                                const label = parts_1.default.TextBound(\"-40\", this.x, this.y, 32, \"orange\", 60);\r\n                                scene.addChild(label);\r\n                                if (score < 0) {\r\n                                    score = 0;\r\n                                }\r\n                            }\r\n                            showLabel(); // スコアを反映\r\n                            // if(score<100){\r\n                            //     setScene(0);\r\n                            // }\r\n                        };\r\n                        {\r\n                            // ボタン作成２\r\n                            const btn2 = parts_1.default.Button(\"シーチキンをあげる\");\r\n                            btn2.moveTo(10, 230);\r\n                            scene.addChild(btn2);\r\n                            btn2.ontouchend = function () {\r\n                                if (score > 0 && score < 100) {\r\n                                    game.assets[pMscs[1]].clone().play(); //音を鳴らす\r\n                                    //   score-=40; // グローバル変数のスコアを40減らす\r\n                                    this.tl.moveBy(0, -150, 40, enchant.Easing.BOUNCE_EASEOUT)\r\n                                        .moveBy(0, 150, 40\r\n                                    //   showLabel(); // スコアを反映\r\n                                    // MEMO: テキストバウンドモジュールを使用する例\r\n                                    //   const label = parts.TextBound(\"-40\", this.x, this.y, 32, \"orange\", 60);\r\n                                    , scene.addChild(label));\r\n                                    //   if(score<0){\r\n                                    score = 0;\r\n                                    //   }\r\n                                }\r\n                                showLabel(); // スコアを反映\r\n                                // if(score<100){\r\n                                //     setScene(0);\r\n                                // }\r\n                            };\r\n                        }\r\n                        {\r\n                            // ボタン作成３\r\n                            const btn3 = parts_1.default.Button(\"遊ぶ\");\r\n                            btn3.moveTo(200, 180);\r\n                            scene.addChild(btn3);\r\n                            btn3.ontouchend = function () {\r\n                                if (score < 100) {\r\n                                    back.onenterframe = function () {\r\n                                        let isLoop = true; // falseにすると止まる\r\n                                        back.onenterframe = function () {\r\n                                            if (!isLoop)\r\n                                                return; // isLoopがtrueでないなら終了\r\n                                            // ここに本文\r\n                                        };\r\n                                        this.tl.moveBy(100, -50, 20, enchant.Easing.BOUNCE_EASEOUT)\r\n                                            .moveBy(-100, 50, 20);\r\n                                    };\r\n                                    game.assets[pMscs[1]].clone().play(); //音を鳴らす\r\n                                    score += 10; // グローバル変数のスコアを10増やす\r\n                                    // showLabel(); // スコアを反映\r\n                                    // MEMO: テキストバウンドモジュールを使用する例\r\n                                    const label = parts_1.default.TextBound(\"+10\", this.x, this.y, 32, \"blue\", 60);\r\n                                    scene.addChild(label);\r\n                                    // var text = new Text(\"Hello,World!\");\r\n                                    // console.log('hello world');\r\n                                    // var printIn=function(str){\r\n                                    //     document.write(str);\r\n                                    //     document.write(\"ハラヘリ!\");\r\n                                    //     document.body.style.backgroundColor=\"#ccffcc\";\r\n                                    // };\r\n                                    //     // alert(\"ハラヘリ\");\r\n                                    //     // function error(mes){\r\n                                    //     //     alert(\"Error:エラーが発生しました。\\nメッセージ:\\n\" + mes);\r\n                                    if (score >= 100) {\r\n                                        score = 100;\r\n                                        back.onenterframe = function () {\r\n                                            this.time++;\r\n                                            this.x += Math.sin(this.time / 0.5) * 8;\r\n                                            this.y += Math.cos(this.time / 0.5) * 8;\r\n                                        };\r\n                                    }\r\n                                    showLabel(); // スコアを反映\r\n                                }\r\n                            };\r\n                        }\r\n                    }\r\n                    {\r\n                        let score = 0; // 二つ目のスコア\r\n                        const label = parts_1.default.Label(\"\");\r\n                        label.moveTo(0, 330); //一つ目の表示と位置をずらす\r\n                        scene.addChild(label);\r\n                        const showLabel = function () {\r\n                            label.text = \"”キャンちゃん”HungerPoint:\" + score;\r\n                            if (score >= 60) {\r\n                                label.text = \"HungerPoint:\" + score + \"※ハラヘリ！※\";\r\n                            }\r\n                            if (score >= 100) {\r\n                                label.text = \"HungerPoint:\" + score + \"※※暴走中！※※\";\r\n                            }\r\n                        };\r\n                        showLabel();\r\n                        const back = new Sprite(160, 120);\r\n                        back.image = game.assets[pImgs[2]];\r\n                        back.moveTo(10, 370);\r\n                        back.time = 0;\r\n                        scene.addChild(back);\r\n                        // ボタン作成１\r\n                        const btn = parts_1.default.Button(\"おやつをあげる\");\r\n                        btn.moveTo(10, 500);\r\n                        scene.addChild(btn);\r\n                        btn.ontouchend = function () {\r\n                            if (score > 0 && score < 100) {\r\n                                game.assets[pMscs[1]].clone().play(); //音を鳴らす\r\n                                score -= 40; // グローバル変数のスコアを40減らす\r\n                                this.tl.moveBy(0, -100, 40, enchant.Easing.BOUNCE_EASEOUT)\r\n                                    .moveBy(0, 100, 40);\r\n                                //   showLabel(); // スコアを反映\r\n                                // MEMO: テキストバウンドモジュールを使用する例\r\n                                const label2 = parts_1.default.TextBound(\"-40\", this.x, this.y, 32, \"orange\", 60);\r\n                                scene.addChild(label2);\r\n                                if (score < 0) {\r\n                                    score = 0;\r\n                                }\r\n                            }\r\n                            showLabel(); // スコアを反映\r\n                        };\r\n                        {\r\n                            // ボタン作成２\r\n                            const btn2 = parts_1.default.Button(\"シーチキンをあげる\");\r\n                            btn2.moveTo(10, 550);\r\n                            scene.addChild(btn2);\r\n                            btn2.ontouchend = function () {\r\n                                if (score > 0 && score < 100) {\r\n                                    game.assets[pMscs[1]].clone().play(); //音を鳴らす\r\n                                    //   score-=40; // グローバル変数のスコアを40減らす\r\n                                    this.tl.moveBy(0, -150, 40, enchant.Easing.BOUNCE_EASEOUT)\r\n                                        .moveBy(0, 150, 40\r\n                                    //   showLabel(); // スコアを反映\r\n                                    // MEMO: テキストバウンドモジュールを使用する例\r\n                                    //   const label = parts.TextBound(\"-40\", this.x, this.y, 32, \"orange\", 60);\r\n                                    , scene.addChild(label));\r\n                                    //   if(score<0){\r\n                                    score = 0;\r\n                                    //   }\r\n                                }\r\n                                showLabel(); // スコアを反映\r\n                                // if(score<100){\r\n                                //     setScene(0);\r\n                                // }\r\n                            };\r\n                        }\r\n                        {\r\n                            // ボタン作成３\r\n                            const btn3 = parts_1.default.Button(\"遊ぶ\");\r\n                            btn3.moveTo(200, 500);\r\n                            scene.addChild(btn3);\r\n                            btn3.ontouchend = function () {\r\n                                if (score < 100) {\r\n                                    back.onenterframe = function () {\r\n                                        let isLoop = true; // falseにすると止まる\r\n                                        back.onenterframe = function () {\r\n                                            if (!isLoop)\r\n                                                return; // isLoopがtrueでないなら終了\r\n                                            // ここに本文\r\n                                        };\r\n                                        this.tl.moveBy(100, -50, 20, enchant.Easing.BOUNCE_EASEOUT)\r\n                                            .moveBy(-100, 50, 20);\r\n                                    };\r\n                                    game.assets[pMscs[1]].clone().play(); //音を鳴らす\r\n                                    score += 10 * 2; // グローバル変数のスコアを10*2増やす\r\n                                    // showLabel(); // スコアを反映\r\n                                    // MEMO: テキストバウンドモジュールを使用する例\r\n                                    const label = parts_1.default.TextBound(\"+20\", this.x, this.y, 32, \"blue\", 60);\r\n                                    scene.addChild(label);\r\n                                    // var text = new Text(\"Hello,World!\");\r\n                                    // console.log('hello world');\r\n                                    // var printIn=function(str){\r\n                                    //     document.write(str);\r\n                                    //     document.write(\"ハラヘリ!\");\r\n                                    //     document.body.style.backgroundColor=\"#ccffcc\";\r\n                                    // };\r\n                                    //     // alert(\"ハラヘリ\");\r\n                                    //     // function error(mes){\r\n                                    //     //     alert(\"Error:エラーが発生しました。\\nメッセージ:\\n\" + mes);\r\n                                    if (score >= 100) {\r\n                                        score = 100;\r\n                                        back.onenterframe = function () {\r\n                                            this.time++;\r\n                                            this.x += Math.sin(this.time / 0.5) * 8;\r\n                                            this.y += Math.cos(this.time / 0.5) * 8;\r\n                                        };\r\n                                    }\r\n                                    showLabel(); // スコアを反映\r\n                                }\r\n                            };\r\n                            // break;\r\n                        }\r\n                    }\r\n                }\r\n                case 1: {\r\n                    //     const btn = parts.Button(\"もう一度遊ぶ\");\r\n                    //     btn.moveTo(100, 200);\r\n                    //     scene.addChild(btn);\r\n                    //     btn.ontouchend = function () {\r\n                    //         setScene(0);\r\n                    // }\r\n                    // break;\r\n                }\r\n            }\r\n        };\r\n        setScene(0);\r\n    };\r\n    game.start();\r\n};\r\n//# sourceMappingURL=script.js.map\n\n//# sourceURL=webpack:///./typescript/script.js?");

/***/ })

/******/ });